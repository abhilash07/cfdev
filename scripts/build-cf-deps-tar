#!/usr/bin/env bash
dir="$(cd "$( dirname $0)" && pwd)"
output_dir="$dir"/../build

set -ex

while getopts "m:s:c:b:" arg; do
  case $arg in
    m) manifest="$OPTARG"
      ;;
    b) manifest="$OPTARG"
      ;;
    s) compilation_stemcell="$OPTARG"
      ;;
    c) cloud_config="$OPTARG"
  esac
done

if [[ -z $manifest || -z $compilation_stemcell || -z $cloud_config ]]; then
  echo "USAGE: build-cf-deps-tar -m <path-to-cf-manifest> -s <path-to-compilation> -c <path-to-cloud-config>"
  exit 2
fi

if [[ -z "$BOSH_ENVIRONMENT" ]]; then
  echo "ERROR: a bosh director is required to compile releases, please set your BOSH_* env variables"
  exit 3
fi

releases_dir="$(mktemp -d)"
mkdir -p "$releases_dir"
trap cleanup EXIT

cleanup () {
  rm -rf "$releases_dir"
}

stemcell_version () {
  rq -y <"$manifest" | jq -r '.stemcells[0].version'
}

download_warden_stemcell () {
  pushd "$releases_dir"
    wget "https://s3.amazonaws.com/bosh-core-stemcells/warden/bosh-stemcell-$(stemcell_version)-warden-boshlite-ubuntu-trusty-go_agent.tgz"
  popd
}

download_compiled_releases () {
  pushd "$releases_dir"
    rq -y <"$manifest" | jq '.releases[] | select(has("stemcell")) | .url' | xargs wget
  popd
}

compile_releases () {
    releases_to_compile="$(rq -y <"$manifest" | jq -r '.releases[] | select(has("stemcell") | not) | "\(.name)/\(.version)"')"
    compilation_manifest="$(rq -y <"$manifest" | jq 'del(.instance_groups) | del(.addons) | del(.variables)' | rq -Y)"
    bosh upload-stemcell "$compilation_stemcell"
    bosh -n deploy -d cf <(echo "$compilation_manifest")
    for release in $releases_to_compile; do
      if [[ "$release" =~ bosh-dns* ]]; then
        ## we cant compile bosh-dns-windows so only compile the linux job
        bosh -d cf export-release "$release" ubuntu-trusty/"$(stemcell_version)" --dir "$releases_dir" --job bosh-dns
      else
        bosh -d cf export-release "$release" ubuntu-trusty/"$(stemcell_version)" --dir "$releases_dir"
      fi
    done
}

tar_deps () {
  cp "$manifest" "$releases_dir"
  cp "$cloud_config" "$releases_dir"
  pushd "$releases_dir"
    tar czf "$output_dir"/cf.tgz *
  popd
}

main () {
  download_warden_stemcell
  download_compiled_releases
  compile_releases
  tar_deps
}

main
